// This file was generated by modules-webmake (modules for web) project.
// See: https://github.com/medikoo/modules-webmake

(function (modules) {
	'use strict';

	var resolve, getRequire, wmRequire, notFoundError, findFile
	  , extensions = {".js":[],".json":[],".css":[],".html":[]}
	  , envRequire = typeof require === 'function' ? require : null;

	notFoundError = function (path) {
		var error = new Error("Could not find module '" + path + "'");
		error.code = 'MODULE_NOT_FOUND';
		return error;
	};
	findFile = function (scope, name, extName) {
		var i, ext;
		if (typeof scope[name + extName] === 'function') return name + extName;
		for (i = 0; (ext = extensions[extName][i]); ++i) {
			if (typeof scope[name + ext] === 'function') return name + ext;
		}
		return null;
	};
	resolve = function (scope, tree, path, fullPath, state, id) {
		var name, dir, exports, module, fn, found, ext;
		path = path.split('/');
		name = path.pop();
		if ((name === '.') || (name === '..')) {
			path.push(name);
			name = '';
		}
		while ((dir = path.shift()) != null)  {
			if (!dir || (dir === '.')) continue;
			if (dir === '..') {
				scope = tree.pop();
				id = id.slice(0, id.lastIndexOf('/'));
			} else {
				tree.push(scope);
				scope = scope[dir];
				id += '/' + dir;
			}
			if (!scope) throw notFoundError(fullPath);
		}
		if (name && (typeof scope[name] !== 'function')) {
			found = findFile(scope, name, '.js');
			if (!found) found = findFile(scope, name, '.json');
			if (!found) found = findFile(scope, name, '.css');
			if (!found) found = findFile(scope, name, '.html');
			if (found) {
				name = found;
			} else if ((state !== 2) && (typeof scope[name] === 'object')) {
				tree.push(scope);
				scope = scope[name];
				id += '/' + name;
				name = '';
			}
		}
		if (!name) {
			if ((state !== 1) && scope[':mainpath:']) {
				return resolve(scope, tree, scope[':mainpath:'], fullPath, 1, id);
			}
			return resolve(scope, tree, 'index', fullPath, 2, id);
		}
		fn = scope[name];
		if (!fn) throw notFoundError(fullPath);
		if (fn.hasOwnProperty('module')) return fn.module.exports;
		exports = {};
		fn.module = module = { exports: exports, id: id + '/' + name };
		fn.call(exports, exports, module, getRequire(scope, tree, id));
		return module.exports;
	};
	wmRequire = function (scope, tree, fullPath, id) {
		var name, path = fullPath, t = fullPath.charAt(0), state = 0;
		if (t === '/') {
			path = path.slice(1);
			scope = modules['/'];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = '/';
			tree = [];
		} else if (t !== '.') {
			name = path.indexOf('@') === 0 ? path.split('/', 2).join("/") : path.split('/', 1)[0];
			scope = modules[name];
			if (!scope) {
				if (envRequire) return envRequire(fullPath);
				throw notFoundError(fullPath);
			}
			id = name;
			tree = [];
			path = path.slice(name.length + 1);
			if (!path) {
				path = scope[':mainpath:'];
				if (path) {
					state = 1;
				} else {
					path = 'index';
					state = 2;
				}
			}
		}
		return resolve(scope, tree, path, fullPath, state, id);
	};
	getRequire = function (scope, tree, id) {
		var localRequire = function (path) {
			return wmRequire(scope, [].concat(tree), path, id);
		};
		if (envRequire) localRequire.fromParentEnvironment = envRequire;
		return localRequire
	};
	return getRequire(modules, [], '');
})
({
	"assets": {
		"main.js": function (exports, module, require) {
			var UserFaker = /** @class */ (function () {
			    function UserFaker() {
			        var _this = this;
			        var _a;
			        this.endpoint = '/wp-json/user-faker/users';
			        this.idHead = 'fakeUserHead';
			        this.idBody = 'fakeUserBody';
			        this.keyFake = 'wordpress_userFakeId';
			        this.elemHead = (_a = (document.getElementsByClassName(this.idHead)[0])) === null || _a === void 0 ? void 0 : _a.children[0];
			        this.elemBody = document.getElementsByClassName(this.idBody)[0];
			        console.log(this.elemHead, this.elemBody);
			        if (this.elemBody && this.elemHead) {
			            fetch(this.endpoint).then(function (res) {
			                res.json().then(function (data) {
			                    if (data.code !== 0) {
			                        return;
			                    }
			                    var popUser = function (arr, id) {
			                        for (var kk = 0; kk < arr.length; kk++) {
			                            if (arr[kk].id === id) {
			                                var user = arr[kk];
			                                arr.splice(kk, 1);
			                                return user;
			                            }
			                        }
			                        return null;
			                    };
			                    var realUser = popUser(data.users, data.realId);
			                    var fakeUser = popUser(data.users, data.fakeId);
			                    var body = '';
			                    var head = '';
			                    body += _this.addUser({ id: 0, login: "Real User" }, _this.isRealUser(data));
			                    if (realUser !== null) {
			                        body += _this.addUser(realUser, _this.isRealUser(data));
			                    }
			                    if (fakeUser !== null) {
			                        body += _this.addUser(fakeUser, true);
			                    }
			                    for (var _i = 0, _a = data.users; _i < _a.length; _i++) {
			                        var user = _a[_i];
			                        body += _this.addUser(user, user.id === data.fakeId || (data.fakeId === 0 && user.id === data.realId));
			                    }
			                    _this.elemBody.innerHTML = body;
			                    if (fakeUser !== null) {
			                        _this.elemHead.innerHTML = "".concat(fakeUser.login);
			                    }
			                    else if (realUser !== null) {
			                        _this.elemHead.innerHTML = "Real: ".concat(realUser.login);
			                    }
			                    var elems = document.getElementsByClassName('uf');
			                    var _loop_1 = function (kk) {
			                        elems[kk].addEventListener('click', function () {
			                            _this.clickUser(elems[kk]);
			                        }, false);
			                    };
			                    for (var kk = 0; kk < elems.length; kk++) {
			                        _loop_1(kk);
			                    }
			                });
			            });
			        }
			    }
			    UserFaker.prototype.addUser = function (user, active) {
			        return "<div class='uf ".concat(active ? "active" : "", "' data-id=\"").concat(user.id, "\" data-login=\"").concat(user.login, "\"><span class=\"ufId\">").concat(user.id, "</span><span class=\"ufLogin\">").concat(user.login, "</span></div>");
			    };
			    UserFaker.prototype.isRealUser = function (data) {
			        return data.fakeId === data.realId || data.fakeId === 0;
			    };
			    UserFaker.prototype.clickUser = function (elem) {
			        var _a;
			        if (!elem.classList.contains('active')) {
			            elem.classList.add('active');
			            var id = elem.dataset.id;
			            var elems = document.getElementsByClassName('uf');
			            for (var kk = 0; kk < elems.length; kk++) {
			                var elem1 = elems[kk];
			                if (elem1.dataset.id !== id) {
			                    elem1.classList.remove('active');
			                }
			            }
			            this.updateCookie(parseInt((_a = elem.dataset.id) !== null && _a !== void 0 ? _a : ''));
			            window.location.reload();
			        }
			    };
			    UserFaker.prototype.updateCookie = function (id) {
			        var keyFake = '$this->keyFake';
			        if (id !== -1 && id !== null) {
			            document.cookie = "".concat(this.keyFake, "=").concat(id, "; path=/ ; Secure");
			        }
			        else {
			            document.cookie = "".concat(this.keyFake, "=; path=/ ; Secure ; Expires=Thu, 01 Jan 1970 00:00:01 GMT;");
			        }
			    };
			    return UserFaker;
			}());
			window.addEventListener('DOMContentLoaded', function () {
			    var uf = new UserFaker();
			});
		}
	}
})("assets/main");
